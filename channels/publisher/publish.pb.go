// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publish.proto

package publisher

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExternalNewEventType int32

const (
	ExternalNewEventType_OnlineStatus ExternalNewEventType = 0
	ExternalNewEventType_ChannelEvent ExternalNewEventType = 1
)

var ExternalNewEventType_name = map[int32]string{
	0: "OnlineStatus",
	1: "ChannelEvent",
}

var ExternalNewEventType_value = map[string]int32{
	"OnlineStatus": 0,
	"ChannelEvent": 1,
}

func (x ExternalNewEventType) String() string {
	return proto.EnumName(ExternalNewEventType_name, int32(x))
}

func (ExternalNewEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_34180b7635741fb2, []int{0}
}

type ExternalNewEvent struct {
	Type                 ExternalNewEventType       `protobuf:"varint,1,opt,name=type,proto3,enum=ExternalNewEventType" json:"type,omitempty"`
	ServerID             string                     `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	OnlineStatusEvent    *ExternalOnlineStatusEvent `protobuf:"bytes,3,opt,name=onlineStatusEvent,proto3" json:"onlineStatusEvent,omitempty"`
	PublishEvent         *ExternalPublishEvent      `protobuf:"bytes,4,opt,name=publishEvent,proto3" json:"publishEvent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ExternalNewEvent) Reset()         { *m = ExternalNewEvent{} }
func (m *ExternalNewEvent) String() string { return proto.CompactTextString(m) }
func (*ExternalNewEvent) ProtoMessage()    {}
func (*ExternalNewEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_34180b7635741fb2, []int{0}
}
func (m *ExternalNewEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalNewEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalNewEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalNewEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalNewEvent.Merge(m, src)
}
func (m *ExternalNewEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExternalNewEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalNewEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalNewEvent proto.InternalMessageInfo

func (m *ExternalNewEvent) GetType() ExternalNewEventType {
	if m != nil {
		return m.Type
	}
	return ExternalNewEventType_OnlineStatus
}

func (m *ExternalNewEvent) GetServerID() string {
	if m != nil {
		return m.ServerID
	}
	return ""
}

func (m *ExternalNewEvent) GetOnlineStatusEvent() *ExternalOnlineStatusEvent {
	if m != nil {
		return m.OnlineStatusEvent
	}
	return nil
}

func (m *ExternalNewEvent) GetPublishEvent() *ExternalPublishEvent {
	if m != nil {
		return m.PublishEvent
	}
	return nil
}

type ExternalPublishEvent struct {
	SenderID             string   `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	EventType            string   `protobuf:"bytes,2,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalPublishEvent) Reset()         { *m = ExternalPublishEvent{} }
func (m *ExternalPublishEvent) String() string { return proto.CompactTextString(m) }
func (*ExternalPublishEvent) ProtoMessage()    {}
func (*ExternalPublishEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_34180b7635741fb2, []int{1}
}
func (m *ExternalPublishEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalPublishEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalPublishEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalPublishEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalPublishEvent.Merge(m, src)
}
func (m *ExternalPublishEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExternalPublishEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalPublishEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalPublishEvent proto.InternalMessageInfo

func (m *ExternalPublishEvent) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ExternalPublishEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *ExternalPublishEvent) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *ExternalPublishEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ExternalOnlineStatusEvent struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Status               bool     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalOnlineStatusEvent) Reset()         { *m = ExternalOnlineStatusEvent{} }
func (m *ExternalOnlineStatusEvent) String() string { return proto.CompactTextString(m) }
func (*ExternalOnlineStatusEvent) ProtoMessage()    {}
func (*ExternalOnlineStatusEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_34180b7635741fb2, []int{2}
}
func (m *ExternalOnlineStatusEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalOnlineStatusEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalOnlineStatusEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalOnlineStatusEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalOnlineStatusEvent.Merge(m, src)
}
func (m *ExternalOnlineStatusEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExternalOnlineStatusEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalOnlineStatusEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalOnlineStatusEvent proto.InternalMessageInfo

func (m *ExternalOnlineStatusEvent) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ExternalOnlineStatusEvent) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *ExternalOnlineStatusEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("ExternalNewEventType", ExternalNewEventType_name, ExternalNewEventType_value)
	proto.RegisterType((*ExternalNewEvent)(nil), "ExternalNewEvent")
	proto.RegisterType((*ExternalPublishEvent)(nil), "ExternalPublishEvent")
	proto.RegisterType((*ExternalOnlineStatusEvent)(nil), "ExternalOnlineStatusEvent")
}

func init() { proto.RegisterFile("publish.proto", fileDescriptor_34180b7635741fb2) }

var fileDescriptor_34180b7635741fb2 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x4e, 0xc2, 0x40,
	0x14, 0x86, 0x19, 0x21, 0x08, 0x4f, 0x34, 0x75, 0xa2, 0xa6, 0x12, 0xd3, 0x10, 0x56, 0xd5, 0x05,
	0x0b, 0x5c, 0xe9, 0x52, 0x25, 0xd1, 0x8d, 0x9a, 0xd1, 0x0b, 0x0c, 0xf2, 0x12, 0x9a, 0x4c, 0xa7,
	0x93, 0x76, 0x40, 0x7b, 0x03, 0x8f, 0xe0, 0x91, 0x5c, 0x7a, 0x02, 0x63, 0xea, 0x45, 0x4c, 0xa7,
	0x2d, 0x2d, 0x55, 0x97, 0xff, 0xeb, 0xff, 0xde, 0xff, 0xfd, 0xe9, 0xc0, 0xb6, 0x5a, 0x4c, 0x85,
	0x17, 0xcd, 0x47, 0x2a, 0x0c, 0x74, 0x30, 0xfc, 0x24, 0x60, 0x4d, 0x5e, 0x34, 0x86, 0x92, 0x8b,
	0x5b, 0x7c, 0x9e, 0x2c, 0x51, 0x6a, 0x7a, 0x0c, 0x2d, 0x1d, 0x2b, 0xb4, 0xc9, 0x80, 0xb8, 0x3b,
	0xe3, 0xfd, 0x51, 0xdd, 0xf0, 0x18, 0x2b, 0x64, 0xc6, 0x42, 0xfb, 0xd0, 0x89, 0x30, 0x5c, 0x62,
	0x78, 0x73, 0x65, 0x6f, 0x0c, 0x88, 0xdb, 0x65, 0x2b, 0x4d, 0xaf, 0x61, 0x37, 0x90, 0xc2, 0x93,
	0xf8, 0xa0, 0xb9, 0x5e, 0x44, 0x66, 0xd5, 0x6e, 0x0e, 0x88, 0xbb, 0x35, 0xee, 0xaf, 0x6e, 0xde,
	0xd5, 0x1d, 0xec, 0xf7, 0x12, 0x3d, 0x83, 0x5e, 0x8e, 0x9d, 0x1d, 0x69, 0x99, 0x23, 0x25, 0xd8,
	0x7d, 0xe5, 0x23, 0x5b, 0xb3, 0x0e, 0x5f, 0x09, 0xec, 0xfd, 0x65, 0xcb, 0xc8, 0xe5, 0xcc, 0x90,
	0x93, 0x82, 0x3c, 0xd3, 0xf4, 0x08, 0xba, 0x58, 0x14, 0xcd, 0x6b, 0x95, 0x03, 0x6a, 0xc3, 0xa6,
	0xe2, 0xb1, 0x08, 0xf8, 0xcc, 0xb4, 0xe9, 0xb2, 0x42, 0xa6, 0x7b, 0xda, 0xf3, 0x31, 0xd2, 0xdc,
	0x57, 0x06, 0xb2, 0xc9, 0xca, 0xc1, 0xd0, 0x87, 0xc3, 0x7f, 0x5b, 0xa7, 0x38, 0x4f, 0xc2, 0x43,
	0xa9, 0x4b, 0x9c, 0x42, 0xd3, 0x03, 0x68, 0x47, 0xc6, 0x6a, 0x58, 0x3a, 0x2c, 0x57, 0xeb, 0x71,
	0xcd, 0x5a, 0xdc, 0xc9, 0x79, 0x59, 0xbc, 0xfa, 0xe3, 0xa8, 0x05, 0xbd, 0x6a, 0xbc, 0xd5, 0x48,
	0x27, 0x97, 0x73, 0x2e, 0x25, 0x0a, 0xe3, 0xb2, 0xc8, 0x85, 0xf5, 0x9e, 0x38, 0xe4, 0x23, 0x71,
	0xc8, 0x57, 0xe2, 0x90, 0xb7, 0x6f, 0xa7, 0x31, 0x6d, 0x9b, 0xf7, 0x72, 0xfa, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0x48, 0xe2, 0x1e, 0x40, 0x02, 0x00, 0x00,
}

func (m *ExternalNewEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalNewEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalNewEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublishEvent != nil {
		{
			size, err := m.PublishEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OnlineStatusEvent != nil {
		{
			size, err := m.OnlineStatusEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintPublish(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPublish(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalPublishEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalPublishEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalPublishEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintPublish(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPublish(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintPublish(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintPublish(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalOnlineStatusEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalOnlineStatusEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalOnlineStatusEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintPublish(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintPublish(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublish(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublish(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExternalNewEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublish(uint64(m.Type))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovPublish(uint64(l))
	}
	if m.OnlineStatusEvent != nil {
		l = m.OnlineStatusEvent.Size()
		n += 1 + l + sovPublish(uint64(l))
	}
	if m.PublishEvent != nil {
		l = m.PublishEvent.Size()
		n += 1 + l + sovPublish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalPublishEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovPublish(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovPublish(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPublish(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPublish(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalOnlineStatusEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovPublish(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovPublish(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPublish(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublish(x uint64) (n int) {
	return sovPublish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalNewEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalNewEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalNewEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ExternalNewEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatusEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnlineStatusEvent == nil {
				m.OnlineStatusEvent = &ExternalOnlineStatusEvent{}
			}
			if err := m.OnlineStatusEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishEvent == nil {
				m.PublishEvent = &ExternalPublishEvent{}
			}
			if err := m.PublishEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalPublishEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalPublishEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalPublishEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalOnlineStatusEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalOnlineStatusEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalOnlineStatusEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublish
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublish
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublish
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublish        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublish          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublish = fmt.Errorf("proto: unexpected end of group")
)
